from pydantic import BaseModel, Field
from typing import Any, Literal, Union


class RouteQuery(BaseModel):
    """ 
        This function is find tool of user query to the most relvant datasource.
        model is possible one of choice about 'normal_generate', 'web_search','vectorstore'
    """
    datasource : Literal['normal_generate','web_search','vectorstore']= Field(
        ...,
        description = 'Given a user "query" or "question", you choose to route web_search or a vectorstore or normal generate'
    )

class GradeDocument(BaseModel):
    """ 
        수집된 문서에서 마다 relevant 를 측정하여 관련성 높은 문서만 수집하는 기법
    
    """
    datasource : str = Field(
        description = 'Determine whether the given document and question are relevant, and answer with "yes" or "no".'
    )


class GradeHallucinations(BaseModel):
    """ 
        retriver 된 데이터와 answer 간의 연관성 확인 
        할루시네이션 : 모델이 상상력을통해 생성한 답변
    
    """
    datasource : str = Field(
        description = 'Answer "yes" or "no" based on whether the answer generated by the LLM is factually consistent with the retrieval.'
    )

class GradeAnswer(BaseModel):
    """ 
        고객의 질문과 최동 답변간의 연관성 확
    
    """
    datasource : str = Field(
        description = 'Indicate "yes" or "no" whether the answer solves the question'
    )


